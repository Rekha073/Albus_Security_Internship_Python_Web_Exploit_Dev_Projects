import re
import asyncio
import aiohttp
from bs4 import BeautifulSoup

# API endpoint and API key validation regex patterns
api_endpoint_pattern = r"https?://[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,}(/[^/\s]+)?"
api_key_pattern = r"[a-zA-Z0-9]{32,}"

# Function to extract API endpoints from HTML content
def extract_api_endpoints(html):
    soup = BeautifulSoup(html, "html.parser")
    api_endpoints = []
    for script in soup.find_all("script"):
        if script.text:
            api_endpoints.extend(re.findall(api_endpoint_pattern, script.text))
    return api_endpoints

# Function to extract API keys from JavaScript files
async def extract_api_keys(session, url):
    try:
        async with session.get(url) as response:
            if response.status == 200:
                js_content = await response.text()
                api_keys = re.findall(api_key_pattern, js_content)
                return api_keys
            else:
                print(f"Failed to fetch {url}: {response.status}")
                return []
    except Exception as e:
        print(f"Error fetching {url}: {e}")
        return []

# Function to validate API endpoints and API keys
def validate_api_leaks(api_endpoints, api_keys):
    valid_api_leaks = []
    for endpoint in api_endpoints:
        for key in api_keys:
            if re.search(key, endpoint):
                valid_api_leaks.append((endpoint, key))
    return valid_api_leaks

# Main function to detect API leaks
async def detect_api_leaks(url):
    try:
        async with aiohttp.ClientSession() as session:
            html_response = await session.get(url)
            html_content = await html_response.text()
            api_endpoints = extract_api_endpoints(html_content)
            js_files = [script["src"] for script in BeautifulSoup(html_content, "html.parser").find_all("script", src=True)]
            api_keys = await asyncio.gather(*[extract_api_keys(session, js_file) for js_file in js_files])
            api_keys = [key for sublist in api_keys for key in sublist]
            valid_api_leaks = validate_api_leaks(api_endpoints, api_keys)
            return valid_api_leaks
    except Exception as e:
        print(f"Error during leak detection: {e}")
        return []

# Command-line interface
def cli():
    print("API Leak Detector")
    print("----------------")
    url = input("Enter the URL to scan for API leaks: ")
    try:
        loop = asyncio.get_event_loop()
        api_leaks = loop.run_until_complete(detect_api_leaks(url))
        if api_leaks:
            print("API Leaks Detected:")
            for endpoint, key in api_leaks:
                print(f"Endpoint: {endpoint}, API Key: {key}")
        else:
            print("No API leaks detected.")
    except Exception as e:
        print(f"Error: {e}")

# Run the CLI
if __name__ == "__main__":
    cli()
